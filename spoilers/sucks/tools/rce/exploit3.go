package main

import (
	"fmt"
	"github.com/tarm/serial"
	"log"
	"os"
	"time"
)

func main() {
	log.SetFlags(log.LstdFlags | log.Lmicroseconds)
	log.Printf("Starting")

	c := &serial.Config{Name: os.Args[1], Baud: 19200}
	s, err := serial.OpenPort(c)
	if err != nil {
		panic(err)
	}

	payload := make([]byte, 1024)

	for i := 0; i < 512; i++ {
		payload[i*2] = 0x02
		payload[(i*2)+1] = 0xBF
	}

	payload[0] = 0
	payload[1] = 0
	payload[2] = 0x21 // LXI, at 0xBF02
	payload[3] = 0x00 // address low byte
	payload[4] = 0x13 // address high byte
	payload[5] = 0xc3 // JMP to print string
	payload[6] = 0xa6
	payload[7] = 0x01

	ch := make(chan byte)

	go read(s, ch)

	cr := []byte("\r")
	_, err = s.Write(cr)
	if err != nil {
		panic(err)
	}

	<-ch

	s.Write(payload)
	_, err = s.Write(cr)
	if err != nil {
		panic(err)
	}

	time.Sleep(5 * time.Second)
}

func read(s *serial.Port, c chan byte) {
	buf := make([]byte, 64)
	for {
		n, err := s.Read(buf)
		if err != nil {
			log.Printf("Serial read error: %v", err)
			close(c)
			os.Exit(1)
		}
		fmt.Printf("%s", buf[:n])
		for _, b := range buf[:n] {
			if b == ':' {
				c <- 1
			}
		}
	}
}
